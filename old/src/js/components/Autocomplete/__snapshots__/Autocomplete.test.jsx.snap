// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Autocomplete> should render <Autocomplete> 1`] = `
<Autocomplete
  className=""
  disabled={false}
  hasError={false}
  isExpanded={false}
  lettersLeftCount={null}
  maxLength={null}
  name="TestAutocomplete"
  onChange={[Function]}
  options={
    Array [
      Object {
        "label": "test",
        "value": "test",
      },
      Object {
        "label": "test2",
        "value": "test2",
      },
    ]
  }
  placeholder={null}
  value=""
>
  <div
    className="autocomplete"
  >
    <Dropdown
      button={
        <AutocompleteInput
          disabled={false}
          hasError={false}
          id="nodejs-input"
          isExpanded={false}
          lettersLeftCount={null}
          maxLength={null}
          onChange={[Function]}
          onClick={[Function]}
          placeholder={null}
          showAllOptions={[Function]}
          showFilteredOptions={[Function]}
          value=""
        />
      }
      className=""
      emptyMessage="No Filtered Data"
      filterable={false}
      fullWidth={false}
      name="nodejs"
      onChange={[Function]}
      recomputeUseButton={false}
      useSubmitOnEnter={false}
      value=""
      withSuffix={Object {}}
    >
      <div
        className="sc-dropdown"
      >
        <AutocompleteInput
          disabled={false}
          hasError={false}
          id="nodejs-input"
          isExpanded={false}
          lettersLeftCount={null}
          maxLength={null}
          onChange={[Function]}
          onClick={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          showAllOptions={[Function]}
          showFilteredOptions={[Function]}
          value=""
        >
          <div
            className="autocomplete-input input-wrapper"
          >
            <div
              className="autocomplete-input__wrapper"
            >
              <Input
                className=""
                disabled={false}
                hasError={false}
                lettersLeftCount={null}
                maxLength={null}
                onChange={[Function]}
                onClick={[Function]}
                onInputRef={[Function]}
                onKeyDown={[Function]}
                placeholder={null}
                submitOnEnter={false}
                suffix=""
                type="text"
                value=""
              >
                <span
                  className="input-field-wrapper"
                >
                  <input
                    className="sc-form-ele input-field with-characters-limit-input"
                    disabled={false}
                    maxLength={null}
                    onChange={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    placeholder={null}
                    type="text"
                    value=""
                  />
                  <div
                    className="input-field__char-limit-counter"
                  >
                    <div
                      className="input-field__char-limit-counter__text"
                    />
                  </div>
                </span>
              </Input>
            </div>
            <button
              className="autocomplete-input__button"
              onClick={[Function]}
            >
              <span
                className="sc-icon-down-arrow"
              />
            </button>
          </div>
        </AutocompleteInput>
        <ul
          aria-labelledby="nodejs-input"
          className="sc-dropdown-menus"
        >
          <DropdownOption
            className=""
            disabled={false}
            icon=""
            key=".$test-test"
            label="test"
            name="nodejs"
            onClick={[Function]}
            selected={true}
            showPopupOnHover={false}
            value="test"
          >
            <li
              className="dropdown-option "
            >
              <label
                className="sc-focus"
                title={undefined}
              >
                <span
                  className=" icon"
                />
                test
                <input
                  data-test-element="option-test"
                  defaultChecked={true}
                  disabled={false}
                  name="nodejs"
                  onClick={[Function]}
                  readOnly="readOnly"
                  role="menu"
                  type="radio"
                  value="test"
                />
              </label>
            </li>
          </DropdownOption>
          <DropdownOption
            className=""
            disabled={false}
            icon=""
            key=".$test2-test2"
            label="test2"
            name="nodejs"
            onClick={[Function]}
            selected={false}
            showPopupOnHover={false}
            value="test2"
          >
            <li
              className="dropdown-option "
            >
              <label
                className=""
                title={undefined}
              >
                <span
                  className=" icon"
                />
                test2
                <input
                  data-test-element="option-test2"
                  defaultChecked={false}
                  disabled={false}
                  name="nodejs"
                  onClick={[Function]}
                  readOnly="readOnly"
                  role="menu"
                  type="radio"
                  value="test2"
                />
              </label>
            </li>
          </DropdownOption>
        </ul>
      </div>
    </Dropdown>
  </div>
</Autocomplete>
`;

exports[`<Autocomplete> should render <Autocomplete> with characters limit 1`] = `
<Autocomplete
  className=""
  disabled={false}
  hasError={false}
  isExpanded={false}
  lettersLeftCount={100}
  maxLength={null}
  name="TestAutocomplete"
  onChange={[Function]}
  options={Array []}
  placeholder={null}
  value=""
>
  <div
    className="autocomplete"
  >
    <Dropdown
      button={
        <AutocompleteInput
          disabled={false}
          hasError={false}
          id="nodejs-input"
          isExpanded={false}
          lettersLeftCount={100}
          maxLength={null}
          onChange={[Function]}
          onClick={[Function]}
          placeholder={null}
          showAllOptions={[Function]}
          showFilteredOptions={[Function]}
          value=""
        />
      }
      className=""
      emptyMessage="No Filtered Data"
      filterable={false}
      fullWidth={false}
      name="nodejs"
      onChange={[Function]}
      recomputeUseButton={false}
      useSubmitOnEnter={false}
      value=""
      withSuffix={Object {}}
    >
      <div
        className="sc-dropdown"
      >
        <AutocompleteInput
          disabled={false}
          hasError={false}
          id="nodejs-input"
          isExpanded={false}
          lettersLeftCount={100}
          maxLength={null}
          onChange={[Function]}
          onClick={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          showAllOptions={[Function]}
          showFilteredOptions={[Function]}
          value=""
        >
          <div
            className="autocomplete-input input-wrapper"
          >
            <div
              className="autocomplete-input__wrapper"
            >
              <Input
                className=""
                disabled={false}
                hasError={false}
                lettersLeftCount={100}
                maxLength={null}
                onChange={[Function]}
                onClick={[Function]}
                onInputRef={[Function]}
                onKeyDown={[Function]}
                placeholder={null}
                submitOnEnter={false}
                suffix=""
                type="text"
                value=""
              >
                <span
                  className="input-field-wrapper"
                >
                  <input
                    className="sc-form-ele input-field with-characters-limit-input"
                    disabled={false}
                    maxLength={null}
                    onChange={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    placeholder={null}
                    type="text"
                    value=""
                  />
                  <div
                    className="input-field__char-limit-counter"
                  >
                    <div
                      className="input-field__char-limit-counter__text"
                    >
                      100
                    </div>
                  </div>
                </span>
              </Input>
            </div>
            <button
              className="autocomplete-input__button"
              onClick={[Function]}
            >
              <span
                className="sc-icon-down-arrow"
              />
            </button>
          </div>
        </AutocompleteInput>
        <ul
          aria-labelledby="nodejs-input"
          className="sc-dropdown-menus"
        />
      </div>
    </Dropdown>
  </div>
</Autocomplete>
`;

exports[`<Autocomplete> should render <Autocomplete> with empty options 1`] = `
<Autocomplete
  className=""
  disabled={false}
  hasError={false}
  isExpanded={false}
  lettersLeftCount={null}
  maxLength={null}
  name="TestAutocomplete"
  onChange={[Function]}
  options={Array []}
  placeholder={null}
  value=""
>
  <div
    className="autocomplete"
  >
    <Dropdown
      button={
        <AutocompleteInput
          disabled={false}
          hasError={false}
          id="nodejs-input"
          isExpanded={false}
          lettersLeftCount={null}
          maxLength={null}
          onChange={[Function]}
          onClick={[Function]}
          placeholder={null}
          showAllOptions={[Function]}
          showFilteredOptions={[Function]}
          value=""
        />
      }
      className=""
      emptyMessage="No Filtered Data"
      filterable={false}
      fullWidth={false}
      name="nodejs"
      onChange={[Function]}
      recomputeUseButton={false}
      useSubmitOnEnter={false}
      value=""
      withSuffix={Object {}}
    >
      <div
        className="sc-dropdown"
      >
        <AutocompleteInput
          disabled={false}
          hasError={false}
          id="nodejs-input"
          isExpanded={false}
          lettersLeftCount={null}
          maxLength={null}
          onChange={[Function]}
          onClick={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          showAllOptions={[Function]}
          showFilteredOptions={[Function]}
          value=""
        >
          <div
            className="autocomplete-input input-wrapper"
          >
            <div
              className="autocomplete-input__wrapper"
            >
              <Input
                className=""
                disabled={false}
                hasError={false}
                lettersLeftCount={null}
                maxLength={null}
                onChange={[Function]}
                onClick={[Function]}
                onInputRef={[Function]}
                onKeyDown={[Function]}
                placeholder={null}
                submitOnEnter={false}
                suffix=""
                type="text"
                value=""
              >
                <span
                  className="input-field-wrapper"
                >
                  <input
                    className="sc-form-ele input-field with-characters-limit-input"
                    disabled={false}
                    maxLength={null}
                    onChange={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    placeholder={null}
                    type="text"
                    value=""
                  />
                  <div
                    className="input-field__char-limit-counter"
                  >
                    <div
                      className="input-field__char-limit-counter__text"
                    />
                  </div>
                </span>
              </Input>
            </div>
            <button
              className="autocomplete-input__button"
              onClick={[Function]}
            >
              <span
                className="sc-icon-down-arrow"
              />
            </button>
          </div>
        </AutocompleteInput>
        <ul
          aria-labelledby="nodejs-input"
          className="sc-dropdown-menus"
        />
      </div>
    </Dropdown>
  </div>
</Autocomplete>
`;

exports[`<Autocomplete> should render disabled <Autocomplete> 1`] = `
<Autocomplete
  className=""
  disabled={true}
  hasError={false}
  isExpanded={false}
  lettersLeftCount={null}
  maxLength={null}
  name="TestAutocomplete"
  onChange={[Function]}
  options={Array []}
  placeholder={null}
  value=""
>
  <div
    className="autocomplete"
  >
    <Dropdown
      button={
        <AutocompleteInput
          disabled={true}
          hasError={false}
          id="nodejs-input"
          isExpanded={false}
          lettersLeftCount={null}
          maxLength={null}
          onChange={[Function]}
          onClick={[Function]}
          placeholder={null}
          showAllOptions={[Function]}
          showFilteredOptions={[Function]}
          value=""
        />
      }
      className=""
      emptyMessage="No Filtered Data"
      filterable={false}
      fullWidth={false}
      name="nodejs"
      onChange={[Function]}
      recomputeUseButton={false}
      useSubmitOnEnter={false}
      value=""
      withSuffix={Object {}}
    >
      <div
        className="sc-dropdown"
      >
        <AutocompleteInput
          disabled={true}
          hasError={false}
          id="nodejs-input"
          isExpanded={false}
          lettersLeftCount={null}
          maxLength={null}
          onChange={[Function]}
          onClick={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          showAllOptions={[Function]}
          showFilteredOptions={[Function]}
          value=""
        >
          <div
            className="disabled autocomplete-input input-wrapper"
          >
            <div
              className="autocomplete-input__wrapper"
            >
              <Input
                className=""
                disabled={true}
                hasError={false}
                lettersLeftCount={null}
                maxLength={null}
                onChange={[Function]}
                onClick={[Function]}
                onInputRef={[Function]}
                onKeyDown={[Function]}
                placeholder={null}
                submitOnEnter={false}
                suffix=""
                type="text"
                value=""
              >
                <span
                  className="input-field-wrapper"
                >
                  <input
                    className="sc-form-ele input-field with-characters-limit-input"
                    disabled={true}
                    maxLength={null}
                    onChange={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    placeholder={null}
                    type="text"
                    value=""
                  />
                  <div
                    className="input-field__char-limit-counter"
                  >
                    <div
                      className="input-field__char-limit-counter__text"
                    />
                  </div>
                </span>
              </Input>
            </div>
            <button
              className="autocomplete-input__button"
              onClick={[Function]}
            >
              <span
                className="sc-icon-down-arrow"
              />
            </button>
          </div>
        </AutocompleteInput>
        <ul
          aria-labelledby="nodejs-input"
          className="sc-dropdown-menus"
        />
      </div>
    </Dropdown>
  </div>
</Autocomplete>
`;
